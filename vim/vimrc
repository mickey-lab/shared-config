" Load all plugins
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'
Plug 'flazz/vim-colorschemes'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'majutsushi/tagbar'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'w0rp/ale'
Plug 'Yggdroot/indentLine'
call plug#end()

" Use Vim defaults
set nocompatible

let mapleader=" "

" Colorscheme settings.
colorscheme zenburn
set background=dark

" Minimal GUI, window size, font
if has('gui_running')
  set guioptions=ac
  set columns=132 lines=43
  set guifont=SauceCodePro\ Nerd\ Font\ Mono\ SemiBold\ 9
endif

" Numbered lines.
set number

" Highlight cursor line.
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter,FocusGained * setlocal cursorline
  au VimEnter,WinEnter,BufWinEnter,FocusGained * setlocal cursorcolumn
  au FocusLost,WinLeave * setlocal nocursorline
  au FocusLost,WinLeave * setlocal nocursorcolumn
augroup END

" Mouse usage enabled in all modes.
set mouse=a
" Set xterm2 mouse mode to allow resizing of splits with mouse inside Tmux.
set ttymouse=xterm2

" Use system clipboard by default
set clipboard=unnamed

" Control character highlighting.
set list listchars=tab:⇥⇥,eol:↵

" Tab settings.
set expandtab
set shiftwidth=4
set ts=4

" Parens matching.
set showmatch
set matchtime=5

" No screen redrawing during macros.
set lazyredraw

" Search settings.
set incsearch
set hlsearch
set ignorecase
set smartcase

" No extra files.
set noswapfile
set nobackup

" WiLd menu.
set wildmenu
set wildignore=*.o,*~,*.pyc

" Aesthetics.
set title

" No annoying alerts.
set noerrorbells
set novisualbell

" Make trailing whitespace annoyingly highlighted.
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Prettify airline
let g:airline_powerline_fonts = 1

" Map tagbar
map <leader>o :TagbarOpenAutoClose<CR>

" Map FZF
map <leader>f :Files<CR>
map <leader>b :Buffers<CR>
map <leader>l :Lines<CR>
map <leader>t :Tags<CR>

" Better ALE interface
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '!'

" Open NERDTree if vim arg is a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
map <leader>n :NERDTreeToggle<CR>

" Set better vertical bar for indentation
let g:indentLine_char = '¦'
